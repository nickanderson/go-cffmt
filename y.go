// Code generated by goyacc -v  parse.y. DO NOT EDIT.

//line parse.y:2
package main

import __yyfmt__ "fmt"

//line parse.y:2

import (
	"github.com/miekg/cf/ast"
)

var (
	parent = ast.New(&ast.Specification{}, ast.Token{})
)

//line parse.y:21
type yySymType struct {
	yys   int
	token ast.Token
}

const IDENTIFIER = 57346
const QSTRING = 57347
const CLASSGUARD = 57348
const PROMISEGUARD = 57349
const BUNDLE = 57350
const BODY = 57351
const PROMISE = 57352
const FATARROW = 57353
const THINARROW = 57354
const NAKEDVAR = 57355

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"QSTRING",
	"CLASSGUARD",
	"PROMISEGUARD",
	"BUNDLE",
	"BODY",
	"PROMISE",
	"FATARROW",
	"THINARROW",
	"NAKEDVAR",
	"'('",
	"')'",
	"','",
	"'}'",
	"'{'",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.y:592

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 1,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 2,
	-2, 0,
	-1, 50,
	15, 44,
	16, 44,
	-2, 37,
	-1, 57,
	17, 86,
	-2, 0,
	-1, 59,
	15, 41,
	-2, 0,
	-1, 61,
	17, 49,
	-2, 0,
	-1, 63,
	17, 87,
	-2, 0,
	-1, 92,
	7, 58,
	17, 58,
	-2, 60,
	-1, 97,
	4, 70,
	19, 70,
	-2, 0,
	-1, 102,
	14, 119,
	-2, 102,
	-1, 104,
	14, 120,
	-2, 104,
	-1, 114,
	19, 73,
	-2, 0,
	-1, 118,
	16, 111,
	17, 111,
	-2, 0,
	-1, 119,
	14, 119,
	-2, 114,
	-1, 121,
	14, 120,
	-2, 116,
	-1, 128,
	19, 74,
	-2, 0,
	-1, 139,
	19, 73,
	-2, 0,
	-1, 145,
	15, 126,
	16, 126,
	-2, 0,
	-1, 150,
	15, 127,
	16, 127,
	-2, 0,
	-1, 151,
	14, 119,
	-2, 130,
	-1, 153,
	14, 120,
	-2, 132,
}

const yyPrivate = 57344

const yyLast = 177

var yyAct = [...]uint8{
	106, 150, 84, 127, 101, 130, 118, 76, 65, 93,
	64, 48, 44, 49, 45, 36, 25, 107, 83, 102,
	103, 111, 87, 123, 15, 119, 120, 80, 104, 123,
	47, 119, 120, 108, 121, 82, 34, 21, 143, 158,
	121, 135, 134, 30, 116, 41, 46, 50, 43, 53,
	155, 141, 151, 152, 59, 54, 161, 52, 56, 112,
	52, 153, 58, 138, 38, 79, 86, 60, 77, 115,
	7, 72, 159, 79, 81, 85, 8, 9, 10, 133,
	71, 132, 70, 88, 67, 100, 67, 73, 42, 53,
	27, 35, 31, 27, 17, 26, 140, 27, 94, 22,
	16, 17, 17, 3, 136, 157, 11, 149, 145, 122,
	137, 124, 109, 117, 105, 90, 69, 68, 126, 94,
	125, 66, 63, 62, 57, 156, 142, 131, 129, 128,
	114, 139, 113, 99, 98, 97, 122, 96, 95, 110,
	92, 91, 144, 146, 89, 148, 154, 147, 78, 75,
	74, 61, 51, 37, 40, 29, 24, 14, 33, 154,
	162, 160, 20, 39, 28, 18, 23, 13, 55, 32,
	19, 12, 6, 5, 4, 2, 1,
}

var yyPact = [...]int16{
	68, -1000, 68, -1000, -1000, -1000, -1000, -1000, -1000, 98,
	-1000, -1000, 97, 93, -1000, -1000, -1000, -1000, 90, 89,
	-1000, -1000, -1000, 50, -1000, -1000, -1000, -1000, 86, -1000,
	-1000, -1000, 50, -1000, -1000, -1000, 28, 45, -1000, 50,
	-1000, -1000, -1000, 28, -1000, -1000, -1000, -1000, 42, -1000,
	-1000, 38, -1000, -1000, 28, -1000, -1000, 78, -1000, 85,
	-1000, 66, 10, 78, -1000, -1000, -1000, -1000, 16, 64,
	-1000, -1000, -1000, -1000, 5, 58, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 80,
	15, -1000, -1000, -1000, -1000, -1000, 2, 57, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27, -1000,
	80, -1000, -1000, 15, 77, -1000, -1000, 25, 102, -1000,
	-1000, -1000, -1000, -1000, 49, -1000, -1000, -1000, 94, 35,
	-1000, -1000, -1000, -1000, -1000, 21, -1000, -1000, -1000, 77,
	-1000, 77, 64, -1000, -1000, 48, -1000, -1000, -1000, 23,
	70, -1000, -1000, -1000, -1000, -1000, 15, 41, 48, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 176, 175, 103, 174, 173, 172, 171, 170, 169,
	15, 168, 167, 166, 12, 165, 164, 163, 162, 24,
	158, 16, 157, 156, 155, 154, 153, 11, 13, 152,
	14, 151, 150, 149, 7, 148, 144, 141, 140, 9,
	139, 8, 138, 137, 135, 134, 133, 132, 4, 131,
	3, 130, 129, 128, 5, 127, 126, 2, 125, 124,
	123, 122, 10, 121, 117, 116, 115, 114, 0, 113,
	6, 112, 111, 110, 108, 107, 105, 1,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 7,
	4, 5, 15, 6, 8, 18, 18, 9, 20, 20,
	12, 22, 22, 13, 23, 23, 16, 24, 24, 17,
	25, 25, 19, 21, 10, 10, 10, 10, 26, 28,
	27, 27, 27, 29, 29, 31, 11, 30, 30, 32,
	32, 33, 33, 33, 36, 34, 35, 37, 37, 38,
	40, 38, 39, 39, 42, 42, 43, 43, 49, 45,
	51, 46, 44, 50, 50, 50, 52, 53, 53, 56,
	58, 54, 55, 55, 59, 14, 60, 60, 61, 61,
	62, 62, 63, 63, 66, 64, 65, 65, 57, 57,
	47, 41, 48, 48, 48, 48, 48, 48, 67, 67,
	67, 69, 69, 69, 70, 70, 70, 70, 70, 71,
	71, 72, 68, 74, 76, 73, 75, 75, 75, 75,
	77, 77, 77, 77, 77,
}

var yyR2 = [...]int8{
	0, 0, 1, 1, 2, 1, 1, 1, 1, 0,
	6, 5, 0, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 2, 2, 1, 1,
	1, 2, 3, 1, 1, 0, 4, 1, 1, 0,
	1, 1, 2, 1, 0, 3, 1, 0, 1, 1,
	0, 3, 1, 1, 2, 2, 1, 1, 0, 5,
	0, 3, 1, 0, 1, 2, 1, 1, 3, 0,
	0, 5, 1, 1, 0, 4, 0, 1, 1, 2,
	1, 1, 2, 2, 0, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 0, 5, 0, 1, 3, 2,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 2, 8, 9,
	10, -3, -7, -12, -22, -19, 2, 4, -15, -8,
	-18, -19, 2, -13, -23, -21, 2, 4, -16, -24,
	-19, 2, -9, -20, -21, 2, -10, -26, 14, -17,
	-25, -21, 2, -10, -14, -30, 18, 2, -27, -28,
	2, -29, 15, 4, -10, -11, -30, -59, -28, 16,
	-14, -31, -60, -61, -62, -41, -63, 6, -64, -65,
	4, 2, -27, 2, -32, -33, -34, 2, -35, 7,
	17, -62, 19, 2, -57, 11, 2, 17, -34, -36,
	-66, -37, -38, -39, -41, -42, -43, -44, -45, -46,
	5, -48, 4, 5, 13, -67, -68, 2, 18, -71,
	-40, 19, 2, -47, -51, 12, 17, -69, -70, 4,
	5, 13, -68, 2, -72, -39, -48, -50, -52, -53,
	-54, -55, 4, 2, 17, 16, 2, -73, 14, -49,
	2, 16, -56, 17, -70, -74, -50, -54, -57, -75,
	-77, 4, 5, 13, -68, 2, -58, -76, 16, 2,
	-48, 15, -77,
}

var yyDef = [...]int16{
	-2, -2, -2, 3, 5, 6, 7, 8, 9, 0,
	12, 4, 0, 0, 20, 21, 22, 32, 0, 0,
	14, 15, 16, 34, 23, 24, 25, 33, 0, 26,
	27, 28, 34, 17, 18, 19, 0, 0, 38, 34,
	29, 30, 31, 0, 11, 84, 47, 48, 0, 36,
	-2, 40, 39, 43, 0, 10, 45, -2, 35, -2,
	13, -2, 0, -2, 88, 90, 91, 101, 0, 0,
	96, 97, 42, 44, 0, 50, 51, 53, 54, 56,
	85, 89, 92, 93, 94, 98, 99, 46, 52, 57,
	0, 55, -2, 59, 62, 63, 0, -2, 66, 67,
	72, 95, -2, 103, -2, 105, 106, 107, 0, 121,
	0, 64, 65, 0, -2, 100, 108, 0, -2, -2,
	115, -2, 117, 118, 0, 61, 68, 71, -2, 76,
	77, 79, 82, 83, 109, 0, 113, 122, 123, -2,
	75, 0, 0, 110, 112, -2, 69, 78, 80, 124,
	-2, -2, 131, -2, 133, 134, 0, 0, 0, 129,
	81, 125, 128,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	14, 15, 3, 3, 16, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 19,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 18, 3, 17,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:29
		{
			yylex.(*Lexer).Spec = &ast.Specification{}
			yylex.(*Lexer).Spec.SetChildren([]ast.Node{ast.Up(parent)})
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:38
		{
			yylex.(*Lexer).yydebug("block:bundle", yyVAL.token)
			// Here we find the actual token, but we get here last. Find original bundle and put
			// token contents in it. Mostly to get the comments out.
			bundle := ast.UpTo(parent, &ast.Bundle{})
			if bundle != nil {
				bundle.SetToken(yyVAL.token)
			}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:48
		{
			yylex.(*Lexer).yydebug("block:body", yyVAL.token)
			body := ast.UpTo(parent, &ast.Body{})
			if body != nil {
				body.SetToken(yyVAL.token)
			}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:57
		{
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:61
		{
			yylex.(*Lexer).yydebug("bundle:BUNDLE", yyVAL.token)
			spec := ast.UpTo(parent, &ast.Specification{})
			parent = spec
			b := ast.New(&ast.Bundle{}, yyVAL.token)
			ast.Append(parent, b)
			parent = b
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse.y:70
		{
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:74
		{
			yylex.(*Lexer).yydebug("body:BODY", yyVAL.token)
			b := ast.New(&ast.Body{}, yyVAL.token)
			ast.Append(parent, b)
			parent = b
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:82
		{
			yylex.(*Lexer).yydebug("promise:PROMISE")
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:90
		{
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:93
		{
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:97
		{
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:102
		{
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:106
		{
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:110
		{
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:113
		{
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:117
		{
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:122
		{
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:126
		{
			yylex.(*Lexer).yydebug("promisecomponent")
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:131
		{
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:134
		{
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:138
		{
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:143
		{
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:149
		{
			ast.Append(parent, ast.New(&ast.Identifier{}, yyVAL.token))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:156
		{
			ast.Append(parent, ast.New(&ast.Identifier{}, yyVAL.token))
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:164
		{
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:168
		{
			yylex.(*Lexer).yydebug("arglist_begin:(", yyVAL.token)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:173
		{
			yylex.(*Lexer).yydebug("arglist_end:)", yyVAL.token)
			bundle := ast.UpTo(parent, &ast.Bundle{})
			if bundle != nil {
				parent = bundle
			} else { // maybe body?
				if body := ast.UpTo(parent, &ast.Body{}); body != nil {
					parent = body
				}
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:186
		{
			if _, ok := parent.(*ast.ArgList); !ok {
				a := ast.New(&ast.ArgList{})
				ast.Append(parent, a)
				parent = a
			}
			al := ast.New(&ast.ArgListItem{}, yyVAL.token)
			ast.Append(parent, al)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:197
		{
			if _, ok := parent.(*ast.ArgList); !ok {
				a := ast.New(&ast.ArgList{})
				ast.Append(parent, a)
				parent = a
			}
			al := ast.New(&ast.ArgListItem{}, yyDollar[3].token)
			ast.Append(parent, al)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:208
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:211
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:217
		{
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:223
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:229
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:232
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:246
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:251
		{
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:254
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:258
		{
			yylex.(*Lexer).yydebug("promise_guard", yyVAL.token)
			pg := ast.New(&ast.PromiseGuard{}, yyVAL.token)
			// If there is previous promiseguard, this one closes it, and we can reparent this new one, to that _parent_.
			prev := ast.UpTo(parent, &ast.PromiseGuard{})
			if prev != nil {
				parent = prev.Parent()
			}
			ast.Append(parent, pg)
			parent = pg
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:271
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:274
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:278
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:281
		{
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:284
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:288
		{
			yylex.(*Lexer).yydebug("classpromise", yyVAL.token)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:292
		{
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:296
		{
			yylex.(*Lexer).yydebug("promise_decl", yyVAL.token)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:300
		{
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:304
		{
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:307
		{
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:316
		{
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:322
		{
			yylex.(*Lexer).yydebug("promise_without_promisee: promiser", yyVAL.token)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:327
		{
			yylex.(*Lexer).yydebug("promise_without_promisee: promise_decl_constraints", yyVAL.token)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:332
		{
			yylex.(*Lexer).yydebug("promiser:QSTRING", yyVAL.token)
			// same level as previous Promiser, or PromiseGuard

			prev := ast.UpTo(parent, &ast.Promiser{})
			if prev == nil {
				if prev = ast.UpTo(parent, &ast.PromiseGuard{}); prev != nil {
					parent = prev
				}
			} else {
				parent = prev.Parent()
			}

			p := ast.New(&ast.Promiser{}, yyVAL.token)
			ast.Append(parent, p)
			parent = p
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:353
		{
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:357
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:364
		{
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:367
		{
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:370
		{
			yylex.(*Lexer).yydebug("contraint:rval")
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:375
		{
			yylex.(*Lexer).yydebug("contraint_id:IDENTIFIER", yyVAL.token)

			prev := ast.UpTo(parent, &ast.Promiser{})
			if prev != nil {
				parent = prev
			}

			c := ast.New(&ast.Constraint{}, yyVAL.token)
			ast.Append(parent, c)
			parent = c
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:388
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:392
		{
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:398
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:408
		{
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:414
		{
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:419
		{
			yylex.(*Lexer).yydebug("selection:assign_arrow")
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:423
		{
			yylex.(*Lexer).yydebug("selection:rval", yyVAL.token)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:428
		{
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:431
		{
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:435
		{
			ast.Append(parent, ast.New(&ast.FatArrow{}, yyVAL.token))
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:439
		{
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:443
		{
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:447
		{
			yylex.(*Lexer).yydebug("class")
			gc := ast.New(&ast.ClassGuard{}, yyVAL.token)
			// If there is previous classguard, this one closes it, and we can reparent this new one, to that _parent_.
			prev := ast.UpTo(parent, &ast.ClassGuard{})
			// If there is no previous one, look for promise guard, and parent to that.
			if prev == nil {
				prev = ast.UpTo(parent, &ast.PromiseGuard{})
			}
			// re-parent if found
			if prev != nil {
				parent = prev.Parent()
			}

			ast.Append(parent, gc)
			parent = gc
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:466
		{
			// awkward that these are the only ones here..?
			yylex.(*Lexer).yydebug("rval:IDENTIFIER", yyVAL.token)
			i := ast.New(&ast.Identifier{}, yyVAL.token)
			ast.Append(parent, i)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:473
		{
			yylex.(*Lexer).yydebug("rval:QSTRING", yyVAL.token)
			q := ast.New(&ast.Qstring{}, yyVAL.token)
			ast.Append(parent, q)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:479
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:482
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:485
		{
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:488
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:497
		{
			// add parent list
			if _, ok := parent.(*ast.List); !ok {
				l := ast.New(&ast.List{})
				ast.Append(parent, l)
				parent = l
			}
			l := ast.New(&ast.ListItem{}, yyVAL.token)
			ast.Append(parent, l)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:508
		{
			// add parent list
			if _, ok := parent.(*ast.List); !ok {
				l := ast.New(&ast.List{})
				ast.Append(parent, l)
				parent = l
			}
			l := ast.New(&ast.ListItem{}, yyDollar[3].token)
			ast.Append(parent, l)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:519
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:523
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:526
		{
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:529
		{
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:532
		{
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:535
		{
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:539
		{
			f := ast.New(&ast.Function{}, ast.Token{})
			ast.Append(parent, f)
			parent = f

			ast.Append(parent, ast.New(&ast.Identifier{}, yyVAL.token))
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:547
		{
			f := ast.New(&ast.Function{}, ast.Token{})
			ast.Append(parent, f)
			parent = f

			ast.Append(parent, ast.New(&ast.NakedVar{}, yyVAL.token))
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:556
		{
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:561
		{
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:565
		{
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:569
		{
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:574
		{
			l := ast.New(&ast.GiveArgItem{}, yyVAL.token) // single arg
			ast.Append(parent, l)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:579
		{
			l := ast.New(&ast.GiveArgItem{}, yyDollar[3].token) // multiple args
			ast.Append(parent, l)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:584
		{
		}
	}
	goto yystack /* stack new state and value */
}
